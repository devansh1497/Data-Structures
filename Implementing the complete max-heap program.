import java.util.*;
public class Heap {
	
	static List<Integer> list = new ArrayList<Integer>();
	
	void maxHeapify(List<Integer> list ,int index ) {
		
			int l = 2*index+1;
			int r = l+1;
			int max=l;
			if(l<=list.size()-1) {
				if(r<=list.size()-1 &&	list.get(r) >list.get(l)) {
					max++;
				}

				if(list.get(index) < list.get(max)) {
					swapValues(list,index,max);
					maxHeapify(list,max);
				}
		}	
	}	
		
	void siftDown(List<Integer> list) {
		
		int k = 0;
		int l = 2*k+1;
		int r = l+1;
		int max ;
		while(l<=list.size()-1) {
			max = l;
			if(r<=list.size()-1 && list.get(l) < list.get(r)) {
				max++;
			
			}
			if(list.get(k) < list.get(max)) {
				
				swapValues(list,max,k);
				k = max;
				l = 2*k+1;
				r = l+1;
			
			}
			else {
				break;
			}
		}
	}
	
	void insertItem(List<Integer> list , int x) {
		
		list.add(x);
		siftUp(list);
	}
	
	void siftUp(List<Integer> list) {
		
		int k = list.size()-1;
		int parent = (k-1)/2;
		
		while(k>0) {
			
			if(list.get(k) > list.get(parent)) {
				
				swapValues(list,k,parent);
				k = parent;
				parent = (k-1)/2;
			}
			else {
				break;
			}
		}
	}
	
	int extractMax(List<Integer> list) {
		
		if(list.size() == 0){
			return -1;
		}
		else if(list.size() == 1) {
			int temp = list.get(0);
			list.remove(0);
			return temp;
		}
		else {
			int temp = list.get(0);
			list.set(0, list.get(list.size()-1));
			list.remove(list.size()-1);
			siftDown(list);
			return temp;
		}
	}
	
	void buildMaxHeap(int a[]) {
		
		for(int i = 0 ; i < a.length ; i++) {
			list.add(a[i]);
		}
		for(int i = a.length/2-1 ; i>=0 ; i--) {
			maxHeapify(list,i);
		}
	}
	
	void swapValues(List<Integer> a , int i , int max) {
		
		int temp = a.get(max);
		a.set(max, a.get(i));
		a.set(i, temp);
		
	}
	
	
	public static void main(String args[]) {
		int[] a = {2,5,1,3,6,8,4};
		Heap h = new Heap();
		h.buildMaxHeap(a);
		System.out.println("Max-heap = "+list);
		System.out.println("Maximum element extracted["+h.extractMax(list)+"]");
		System.out.println("The heap is now - "+list);
		System.out.println("Adding element 7 to the current max-heap");
		h.insertItem(list, 7);
		System.out.println("The max heap becomes - "+list);
		
	}

}
